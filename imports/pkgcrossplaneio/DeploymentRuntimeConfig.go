package pkgcrossplaneio

import (
	_init_ "example.com/cdk8s-demo/imports/pkgcrossplaneio/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"example.com/cdk8s-demo/imports/pkgcrossplaneio/internal"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
)

// The DeploymentRuntimeConfig provides settings for the Kubernetes Deployment of a Provider or composition function package.
//
// Read the Crossplane documentation for
// [more information about DeploymentRuntimeConfigs](https://docs.crossplane.io/latest/concepts/providers/#runtime-configuration).
type DeploymentRuntimeConfig interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for DeploymentRuntimeConfig
type jsiiProxy_DeploymentRuntimeConfig struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_DeploymentRuntimeConfig) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeploymentRuntimeConfig) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "DeploymentRuntimeConfig" API object.
func NewDeploymentRuntimeConfig(scope constructs.Construct, id *string, props *DeploymentRuntimeConfigProps) DeploymentRuntimeConfig {
	_init_.Initialize()

	if err := validateNewDeploymentRuntimeConfigParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_DeploymentRuntimeConfig{}

	_jsii_.Create(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "DeploymentRuntimeConfig" API object.
func NewDeploymentRuntimeConfig_Override(d DeploymentRuntimeConfig, scope constructs.Construct, id *string, props *DeploymentRuntimeConfigProps) {
	_init_.Initialize()

	_jsii_.Create(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		[]interface{}{scope, id, props},
		d,
	)
}

// Return whether the given object is an `ApiObject`.
//
// We do attribute detection since we can't reliably use 'instanceof'.
func DeploymentRuntimeConfig_IsApiObject(o interface{}) *bool {
	_init_.Initialize()

	if err := validateDeploymentRuntimeConfig_IsApiObjectParameters(o); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		"isApiObject",
		[]interface{}{o},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func DeploymentRuntimeConfig_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateDeploymentRuntimeConfig_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "DeploymentRuntimeConfig".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func DeploymentRuntimeConfig_Manifest(props *DeploymentRuntimeConfigProps) interface{} {
	_init_.Initialize()

	if err := validateDeploymentRuntimeConfig_ManifestParameters(props); err != nil {
		panic(err)
	}
	var returns interface{}

	_jsii_.StaticInvoke(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func DeploymentRuntimeConfig_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	if err := validateDeploymentRuntimeConfig_OfParameters(c); err != nil {
		panic(err)
	}
	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func DeploymentRuntimeConfig_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"pkgcrossplaneio.DeploymentRuntimeConfig",
		"GVK",
		&returns,
	)
	return returns
}

func (d *jsiiProxy_DeploymentRuntimeConfig) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		d,
		"addDependency",
		args,
	)
}

func (d *jsiiProxy_DeploymentRuntimeConfig) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		d,
		"addJsonPatch",
		args,
	)
}

func (d *jsiiProxy_DeploymentRuntimeConfig) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DeploymentRuntimeConfig) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

